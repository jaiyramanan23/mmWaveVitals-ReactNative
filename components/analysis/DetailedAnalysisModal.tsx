/**
 * Detailed Clinical Analysis Modal
 * Displays comprehensive clinical analysis results with medical recommendations
 */

import { MaterialIcons } from '@expo/vector-icons';
import React from 'react';
import {
    Alert,
    Dimensions,
    Modal,
    ScrollView,
    Share,
    StyleSheet,
    Text,
    TouchableOpacity,
    View
} from 'react-native';
import { ClinicalAnalysisResult } from '../../services/clinicalBackend';

const { width, height } = Dimensions.get('window');

interface DetailedAnalysisModalProps {
    visible: boolean;
    analysisResult: ClinicalAnalysisResult | null;
    onClose: () => void;
}

const DetailedAnalysisModal: React.FC<DetailedAnalysisModalProps> = ({
    visible,
    analysisResult,
    onClose
}) => {
    if (!analysisResult) return null;

    const getUrgencyColor = (urgency: string) => {
        switch (urgency) {
            case 'immediate': return '#FF4444';
            case 'urgent': return '#FF8800';
            case 'scheduled': return '#FFA500';
            case 'routine': return '#4CAF50';
            default: return '#666';
        }
    };

    const getSeverityColor = (severity: string) => {
        switch (severity) {
            case 'high': return '#FF4444';
            case 'medium': return '#FF8800';
            case 'low': return '#4CAF50';
            default: return '#666';
        }
    };

    const shareAnalysis = async () => {
        try {
            const shareContent = `
🩺 Clinical Heart Sound Analysis Report

📅 Date: ${new Date(analysisResult.timestamp).toLocaleString()}
🔍 File: ${analysisResult.filename}

🩺 CLINICAL DIAGNOSIS
Condition: ${analysisResult.clinical_analysis.condition}
Confidence: ${(analysisResult.clinical_analysis.confidence * 100).toFixed(1)}%
Severity: ${analysisResult.clinical_analysis.severity.toUpperCase()}
Urgency: ${analysisResult.clinical_analysis.urgency.toUpperCase()}

📋 RECOMMENDED ACTION
${analysisResult.clinical_analysis.recommended_action}

🎵 AUDIO ANALYSIS
Duration: ${analysisResult.audio_characteristics.duration_seconds.toFixed(1)}s
Signal Quality: ${analysisResult.audio_characteristics.signal_quality}
Murmur Detected: ${analysisResult.audio_characteristics.murmur_detected ? 'Yes' : 'No'}
Rhythm: ${analysisResult.audio_characteristics.rhythm_assessment}

💡 IMMEDIATE ACTIONS
${analysisResult.medical_recommendations.immediate_actions.map(action => `• ${action}`).join('\n')}

🏥 FOLLOW-UP RECOMMENDATIONS
${analysisResult.medical_recommendations.follow_up.map(rec => `• ${rec}`).join('\n')}

⚠️ WHEN TO SEEK HELP
${analysisResult.medical_recommendations.when_to_seek_help.map(help => `• ${help}`).join('\n')}

🌟 LIFESTYLE ADVICE
${analysisResult.medical_recommendations.lifestyle_advice.map(advice => `• ${advice}`).join('\n')}

📝 NEXT STEPS
${analysisResult.next_steps.map(step => `• ${step}`).join('\n')}

⚠️ IMPORTANT NOTES
${analysisResult.important_notes.map(note => `• ${note}`).join('\n')}

---
Generated by mmWaveVitals Clinical Analysis System
This analysis is for informational purposes only and should not replace professional medical consultation.
            `.trim();

            await Share.share({
                message: shareContent,
                title: 'Clinical Heart Sound Analysis Report'
            });
        } catch (error) {
            Alert.alert('Share Error', 'Failed to share analysis report');
        }
    };

    return (
        <Modal
            visible={visible}
            animationType="slide"
            presentationStyle="pageSheet"
        >
            <View style={styles.container}>
                {/* Header */}
                <View style={styles.header}>
                    <View style={styles.headerLeft}>
                        <MaterialIcons name="local-hospital" size={28} color="#FF6B9D" />
                        <Text style={styles.headerTitle}>Clinical Analysis</Text>
                    </View>
                    <View style={styles.headerRight}>
                        <TouchableOpacity onPress={shareAnalysis} style={styles.shareButton}>
                            <MaterialIcons name="share" size={24} color="#007AFF" />
                        </TouchableOpacity>
                        <TouchableOpacity onPress={onClose} style={styles.closeButton}>
                            <MaterialIcons name="close" size={24} color="#666" />
                        </TouchableOpacity>
                    </View>
                </View>

                <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
                    {/* Primary Diagnosis Card */}
                    <View style={styles.card}>
                        <View style={styles.cardHeader}>
                            <MaterialIcons name="favorite" size={24} color="#FF6B9D" />
                            <Text style={styles.cardTitle}>Primary Diagnosis</Text>
                        </View>
                        <View style={styles.diagnosisContainer}>
                            <Text style={styles.diagnosisText}>
                                {analysisResult.clinical_analysis.condition}
                            </Text>
                            <View style={styles.confidenceContainer}>
                                <Text style={styles.confidenceLabel}>Confidence:</Text>
                                <Text style={styles.confidenceValue}>
                                    {(analysisResult.clinical_analysis.confidence * 100).toFixed(1)}%
                                </Text>
                            </View>
                        </View>
                        
                        {/* Severity and Urgency */}
                        <View style={styles.severityUrgencyContainer}>
                            <View style={[styles.severityBadge, { backgroundColor: getSeverityColor(analysisResult.clinical_analysis.severity) }]}>
                                <Text style={styles.badgeText}>
                                    {analysisResult.clinical_analysis.severity.toUpperCase()} SEVERITY
                                </Text>
                            </View>
                            <View style={[styles.urgencyBadge, { backgroundColor: getUrgencyColor(analysisResult.clinical_analysis.urgency) }]}>
                                <Text style={styles.badgeText}>
                                    {analysisResult.clinical_analysis.urgency.toUpperCase()} URGENCY
                                </Text>
                            </View>
                        </View>
                    </View>

                    {/* Recommended Action Card */}
                    <View style={styles.card}>
                        <View style={styles.cardHeader}>
                            <MaterialIcons name="assignment" size={24} color="#4CAF50" />
                            <Text style={styles.cardTitle}>Recommended Action</Text>
                        </View>
                        <Text style={styles.recommendedActionText}>
                            {analysisResult.clinical_analysis.recommended_action}
                        </Text>
                    </View>

                    {/* Audio Characteristics Card */}
                    <View style={styles.card}>
                        <View style={styles.cardHeader}>
                            <MaterialIcons name="graphic-eq" size={24} color="#2196F3" />
                            <Text style={styles.cardTitle}>Audio Analysis</Text>
                        </View>
                        <View style={styles.characteristicsGrid}>
                            <View style={styles.characteristicItem}>
                                <Text style={styles.characteristicLabel}>Duration</Text>
                                <Text style={styles.characteristicValue}>
                                    {analysisResult.audio_characteristics.duration_seconds.toFixed(1)}s
                                </Text>
                            </View>
                            <View style={styles.characteristicItem}>
                                <Text style={styles.characteristicLabel}>Signal Quality</Text>
                                <Text style={styles.characteristicValue}>
                                    {analysisResult.audio_characteristics.signal_quality}
                                </Text>
                            </View>
                            <View style={styles.characteristicItem}>
                                <Text style={styles.characteristicLabel}>Murmur</Text>
                                <Text style={[styles.characteristicValue, { 
                                    color: analysisResult.audio_characteristics.murmur_detected ? '#FF8800' : '#4CAF50' 
                                }]}>
                                    {analysisResult.audio_characteristics.murmur_detected ? 'Detected' : 'Not Detected'}
                                </Text>
                            </View>
                            <View style={styles.characteristicItem}>
                                <Text style={styles.characteristicLabel}>Rhythm</Text>
                                <Text style={styles.characteristicValue}>
                                    {analysisResult.audio_characteristics.rhythm_assessment}
                                </Text>
                            </View>
                        </View>
                    </View>

                    {/* Clinical Features Card */}
                    <View style={styles.card}>
                        <View style={styles.cardHeader}>
                            <MaterialIcons name="health-and-safety" size={24} color="#FF8800" />
                            <Text style={styles.cardTitle}>Clinical Features</Text>
                        </View>
                        <View style={styles.featuresList}>
                            <View style={styles.featureItem}>
                                <MaterialIcons 
                                    name={analysisResult.clinical_analysis.clinical_features.murmur_detected ? "warning" : "check-circle"} 
                                    size={20} 
                                    color={analysisResult.clinical_analysis.clinical_features.murmur_detected ? "#FF8800" : "#4CAF50"} 
                                />
                                <Text style={styles.featureText}>
                                    Murmur: {analysisResult.clinical_analysis.clinical_features.murmur_detected ? 'Detected' : 'Not Detected'}
                                </Text>
                            </View>
                            <View style={styles.featureItem}>
                                <MaterialIcons 
                                    name={analysisResult.clinical_analysis.clinical_features.rhythm_irregular ? "warning" : "check-circle"} 
                                    size={20} 
                                    color={analysisResult.clinical_analysis.clinical_features.rhythm_irregular ? "#FF8800" : "#4CAF50"} 
                                />
                                <Text style={styles.featureText}>
                                    Rhythm: {analysisResult.clinical_analysis.clinical_features.rhythm_irregular ? 'Irregular' : 'Regular'}
                                </Text>
                            </View>
                            <View style={styles.featureItem}>
                                <MaterialIcons 
                                    name="signal-cellular-alt" 
                                    size={20} 
                                    color="#2196F3" 
                                />
                                <Text style={styles.featureText}>
                                    Signal Quality: {analysisResult.clinical_analysis.clinical_features.signal_quality}
                                </Text>
                            </View>
                        </View>
                    </View>

                    {/* Medical Recommendations Card */}
                    <View style={styles.card}>
                        <View style={styles.cardHeader}>
                            <MaterialIcons name="medical-services" size={24} color="#9C27B0" />
                            <Text style={styles.cardTitle}>Medical Recommendations</Text>
                        </View>
                        
                        {/* Immediate Actions */}
                        <View style={styles.recommendationSection}>
                            <Text style={styles.recommendationSectionTitle}>🚨 Immediate Actions</Text>
                            {analysisResult.medical_recommendations.immediate_actions.map((action, index) => (
                                <Text key={index} style={styles.recommendationItem}>• {action}</Text>
                            ))}
                        </View>

                        {/* Follow-up */}
                        <View style={styles.recommendationSection}>
                            <Text style={styles.recommendationSectionTitle}>📅 Follow-up Recommendations</Text>
                            {analysisResult.medical_recommendations.follow_up.map((rec, index) => (
                                <Text key={index} style={styles.recommendationItem}>• {rec}</Text>
                            ))}
                        </View>

                        {/* When to Seek Help */}
                        <View style={styles.recommendationSection}>
                            <Text style={styles.recommendationSectionTitle}>⚠️ When to Seek Medical Help</Text>
                            {analysisResult.medical_recommendations.when_to_seek_help.map((help, index) => (
                                <Text key={index} style={styles.recommendationItem}>• {help}</Text>
                            ))}
                        </View>

                        {/* Lifestyle Advice */}
                        <View style={styles.recommendationSection}>
                            <Text style={styles.recommendationSectionTitle}>🌟 Lifestyle Recommendations</Text>
                            {analysisResult.medical_recommendations.lifestyle_advice.map((advice, index) => (
                                <Text key={index} style={styles.recommendationItem}>• {advice}</Text>
                            ))}
                        </View>
                    </View>

                    {/* Next Steps Card */}
                    <View style={styles.card}>
                        <View style={styles.cardHeader}>
                            <MaterialIcons name="assignment-turned-in" size={24} color="#607D8B" />
                            <Text style={styles.cardTitle}>Next Steps</Text>
                        </View>
                        {analysisResult.next_steps.map((step, index) => (
                            <View key={index} style={styles.stepItem}>
                                <View style={styles.stepNumber}>
                                    <Text style={styles.stepNumberText}>{index + 1}</Text>
                                </View>
                                <Text style={styles.stepText}>{step}</Text>
                            </View>
                        ))}
                    </View>

                    {/* Important Notes Card */}
                    <View style={styles.card}>
                        <View style={styles.cardHeader}>
                            <MaterialIcons name="info" size={24} color="#FF5722" />
                            <Text style={styles.cardTitle}>Important Notes</Text>
                        </View>
                        {analysisResult.important_notes.map((note, index) => (
                            <Text key={index} style={styles.importantNote}>⚠️ {note}</Text>
                        ))}
                    </View>

                    {/* Technical Details Card */}
                    <View style={styles.card}>
                        <View style={styles.cardHeader}>
                            <MaterialIcons name="science" size={24} color="#795548" />
                            <Text style={styles.cardTitle}>Technical Details</Text>
                        </View>
                        <View style={styles.technicalGrid}>
                            <View style={styles.technicalItem}>
                                <Text style={styles.technicalLabel}>Analysis Date</Text>
                                <Text style={styles.technicalValue}>
                                    {new Date(analysisResult.timestamp).toLocaleString()}
                                </Text>
                            </View>
                            <View style={styles.technicalItem}>
                                <Text style={styles.technicalLabel}>File Size</Text>
                                <Text style={styles.technicalValue}>
                                    {(analysisResult.file_size_bytes / 1024).toFixed(1)} KB
                                </Text>
                            </View>
                            <View style={styles.technicalItem}>
                                <Text style={styles.technicalLabel}>Filename</Text>
                                <Text style={styles.technicalValue}>
                                    {analysisResult.filename}
                                </Text>
                            </View>
                        </View>
                    </View>

                    <View style={styles.bottomPadding} />
                </ScrollView>
            </View>
        </Modal>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#f8f9fa',
    },
    header: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingHorizontal: 20,
        paddingVertical: 15,
        backgroundColor: 'white',
        borderBottomWidth: 1,
        borderBottomColor: '#e1e8ed',
        paddingTop: 50,
    },
    headerLeft: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    headerTitle: {
        fontSize: 20,
        fontWeight: '600',
        color: '#1a1a1a',
        marginLeft: 10,
    },
    headerRight: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    shareButton: {
        padding: 8,
        marginRight: 10,
    },
    closeButton: {
        padding: 8,
    },
    content: {
        flex: 1,
        paddingHorizontal: 20,
    },
    card: {
        backgroundColor: 'white',
        borderRadius: 12,
        padding: 16,
        marginVertical: 8,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        elevation: 3,
    },
    cardHeader: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 12,
    },
    cardTitle: {
        fontSize: 18,
        fontWeight: '600',
        color: '#1a1a1a',
        marginLeft: 8,
    },
    diagnosisContainer: {
        marginBottom: 16,
    },
    diagnosisText: {
        fontSize: 24,
        fontWeight: '700',
        color: '#1a1a1a',
        marginBottom: 8,
    },
    confidenceContainer: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    confidenceLabel: {
        fontSize: 16,
        color: '#666',
        marginRight: 8,
    },
    confidenceValue: {
        fontSize: 18,
        fontWeight: '600',
        color: '#4CAF50',
    },
    severityUrgencyContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
    },
    severityBadge: {
        paddingHorizontal: 12,
        paddingVertical: 6,
        borderRadius: 20,
        flex: 0.48,
        alignItems: 'center',
    },
    urgencyBadge: {
        paddingHorizontal: 12,
        paddingVertical: 6,
        borderRadius: 20,
        flex: 0.48,
        alignItems: 'center',
    },
    badgeText: {
        color: 'white',
        fontSize: 12,
        fontWeight: '600',
    },
    recommendedActionText: {
        fontSize: 16,
        color: '#1a1a1a',
        lineHeight: 24,
    },
    characteristicsGrid: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'space-between',
    },
    characteristicItem: {
        width: '48%',
        marginBottom: 12,
    },
    characteristicLabel: {
        fontSize: 14,
        color: '#666',
        marginBottom: 4,
    },
    characteristicValue: {
        fontSize: 16,
        fontWeight: '600',
        color: '#1a1a1a',
    },
    featuresList: {
        marginTop: 8,
    },
    featureItem: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 8,
    },
    featureText: {
        fontSize: 16,
        color: '#1a1a1a',
        marginLeft: 8,
    },
    recommendationSection: {
        marginBottom: 16,
    },
    recommendationSectionTitle: {
        fontSize: 16,
        fontWeight: '600',
        color: '#1a1a1a',
        marginBottom: 8,
    },
    recommendationItem: {
        fontSize: 15,
        color: '#333',
        lineHeight: 22,
        marginBottom: 4,
    },
    stepItem: {
        flexDirection: 'row',
        alignItems: 'flex-start',
        marginBottom: 12,
    },
    stepNumber: {
        width: 24,
        height: 24,
        borderRadius: 12,
        backgroundColor: '#607D8B',
        alignItems: 'center',
        justifyContent: 'center',
        marginRight: 12,
        marginTop: 2,
    },
    stepNumberText: {
        color: 'white',
        fontSize: 12,
        fontWeight: '600',
    },
    stepText: {
        flex: 1,
        fontSize: 15,
        color: '#1a1a1a',
        lineHeight: 22,
    },
    importantNote: {
        fontSize: 15,
        color: '#FF5722',
        lineHeight: 22,
        marginBottom: 6,
        fontWeight: '500',
    },
    technicalGrid: {
        marginTop: 8,
    },
    technicalItem: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingVertical: 6,
        borderBottomWidth: 1,
        borderBottomColor: '#f0f0f0',
    },
    technicalLabel: {
        fontSize: 14,
        color: '#666',
        flex: 1,
    },
    technicalValue: {
        fontSize: 14,
        color: '#1a1a1a',
        fontWeight: '500',
        flex: 2,
        textAlign: 'right',
    },
    bottomPadding: {
        height: 30,
    },
});

export default DetailedAnalysisModal;
